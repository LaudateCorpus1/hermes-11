#!/usr/bin/env python

""" Command-line interface to Hermes."""

import argparse
import BaseHTTPServer
import code
import getpass
import logging
from pprint import pprint

import hermes
from hermes import models
from hermes.settings import settings

sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


def make_session():
    db_engine = models.get_db_engine(settings["database"])
    models.Session.configure(bind=db_engine)
    return models.Session()


def info_event_types(args):
    logging.debug("info_event_types()")
    session = make_session()
    event_types = models.EventType.query().all()
    for event_type in event_types:
        print "%s-%s" % (event_type.category, event_type.state)


def main():

    description_msg = "EMS CLI"
    parser = argparse.ArgumentParser(description=description_msg)

    parser.add_argument("-c", "--config", default="/etc/hermes.yaml",
                        help="Path to config file.")
    parser.add_argument("-v", "--verbose", action="count", default=0, help="Increase logging verbosity.")
    parser.add_argument("-q", "--quiet", action="count", default=0, help="Decrease logging verbosity.")
    parser.add_argument("-V", "--version", action="version",
                        version="%%(prog)s %s" % hermes.__version__,
                        help="Display version information.")

    subparsers = parser.add_subparsers(dest="command")

    # Add the command line parsers for info commands
    info_parser = subparsers.add_parser("info", help="Display information about EMS types.")
    info_subparsers = info_parser.add_subparsers()
    info_event_types_parser = info_subparsers.add_parser("event-types")
    info_event_types_parser.set_defaults(func=info_event_types)


    args = parser.parse_args()
    settings.update_from_config(args.config)

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    elif args.quiet:
        logging.basicConfig(level=logging.ERROR)
    else:
        logging.basicConfig(level=logging.INFO)

    args.func(args)



if __name__ == "__main__":
    main()
