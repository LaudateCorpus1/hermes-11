#!/usr/bin/env python

""" Command-line interface to Hermes."""

from __future__ import division

import argparse
import getpass
import logging
import sys

import hermes
from hermes import models
from hermes.models import Event, EventType, Host, Fate, Achievement, Quest
from hermes.settings import settings

sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


def make_session():
    db_engine = models.get_db_engine(settings["database"], echo=False)
    models.Session.configure(bind=db_engine)
    return models.Session()


def info_event_types(args):
    logging.debug("info_event_types()")
    session = make_session()
    event_types = EventType.query().all()
    print"\n{}{}".format(str.ljust("CATEGORY", 20), str.ljust("STATE", 20))
    for event_type in event_types:
        print "{}{}".format(
            str.ljust(event_type.category, 20), str.ljust(event_type.state, 20)
        )

    session.close()


def info_fates(args):
    logging.debug("info_fates()")
    session = make_session()
    fates = Fate.query().all()
    print "\nFATES  (created by => completed by)\n "
    for fate in fates:
        creation_event = fate.creation_event_type
        completion_event = fate.completion_event_type
        print "{} => {}".format(
            creation_event.category + "-" + creation_event.state,
            completion_event.category + "-" + completion_event.state
        )
        print fate.description
        print ""
    session.close()


def list_hosts(args):
    logging.debug("list_hosts()")
    session = make_session()
    hosts = Host.query().all()
    print "HOSTS:"
    for host in hosts:
        print "{}".format(host.hostname)
    session.close()


def add_host(args):
    logging.debug("add_host(%s)", args.hostname)
    session = make_session()
    host = Host.get_host(session, args.hostname)
    if host is None:
        Host.create(session, args.hostname)
        print "Created host {}".format(args.hostname)
        session.commit()
    else:
        print "Host {} already exists".format(args.hostname)
    session.close()


def list_host_events(args):
    logging.debug("list_host_events(%s)", args.hostname)
    session = make_session()
    host = Host.get_host(session, args.hostname)
    if host is None:
        logging.error("Could not find hostname %s", args.hostname)
        return

    events = host.get_latest_events(args.limit)

    print "EVENTS FOR {}:".format(host.hostname)
    for event in events:
        print "{}  {} {}  {}".format(
            event.timestamp, event.event_type.category,
            event.event_type.state, event.note
        )


def list_host_achievements(args):
    logging.debug("list_host_achievements(%s)", args.hostname)
    session = make_session()
    host = Host.get_host(session, args.hostname)
    if host is None:
        logging.error("Could not find hostname %s", args.hostname)
        return

    achievements = host.get_open_achievements(args.limit)

    print "OPEN ACHIEVEMENTS FOR {}:".format(host.hostname)
    for achievement in achievements:
        print "{} created by event {} {}  {}".format(
            achievement.creation_time,
            achievement.creation_event.event_type.category,
            achievement.creation_event.event_type.state,
            achievement.creation_event.note or ""
        )


def create_event(args):
    logging.debug("create_event()")
    logging.debug(
        "host: %s    category: %s    state: %s    note: %s",
        args.hostname, args.category, args.state, args.note
    )

    session = make_session()

    event_type = EventType.get_event_type(session, args.category, args.state)

    if event_type is None:
        logging.error(
            "No matching event state found for %s %s", args.category, args.state
        )
        session.close()
        return

    host = Host.get_host(session, args.hostname)

    if host is None:
        host = Host.create(session, args.hostname)

    user = getpass.getuser()

    event = Event.create(session, host, user, event_type, args.note)

    if event:
        print "Event created: {} => {} {}".format(
            host.hostname, event_type.category, event_type.state
        )
        session.commit()
    else:
        print "Event creation failed."
        session.rollback()

    session.close()


def list_quests(args):
    logging.debug("list_quests()")
    session = make_session()

    quests = Quest.get_open_quests(session)

    print "QUESTS:"
    for quest in quests:
        print "[{}] {} by {}.  Embarked on {}".format(
            quest.id, quest.description, quest.creator, quest.embark_time
        )

        achievements_remaining = 0
        for achievement in quest.achievements:
            if achievement.completion_time is None:
                achievements_remaining += 1

        total_achievements = len(quest.achievements)
        print "{:.2%} complete.  {} total achievements.  {} remain open.\n".format(
            (total_achievements - achievements_remaining)/total_achievements,
            total_achievements,
            achievements_remaining
        )

    session.close()


def show_quest(args):
    logging.debug("show_quest(%d)", args.quest_id)
    session = make_session()

    quest = session.query(Quest).get(args.quest_id)

    print "QUEST {}:".format(args.quest_id)
    print "{} by {}.  Embarked on {}".format(
        quest.description, quest.creator, quest.embark_time
    )

    max_width = 0
    for achievement in quest.achievements:
        if len(achievement.host.hostname) > max_width:
            max_width = len(achievement.host.hostname)

    remaining = []
    completed = []
    for achievement in quest.achievements:
        if args.all is True or achievement.completion_time is None:
            if achievement.completion_time is None:
                remaining.append(achievement)
            else:
                completed.append(achievement)

    for achievement in completed:
        print "{} achieved {} {} on {}".format(
            achievement.host.hostname.rjust(max_width + 4),
            achievement.creation_event.event_type.category,
            achievement.creation_event.event_type.state,
            achievement.completion_time
        )

    for achievement in remaining:
        print "{} must achieve {} {}".format(
            achievement.host.hostname.rjust(max_width + 4),
            achievement.creation_event.event_type.category,
            achievement.creation_event.event_type.state
        )

    total_achievements = len(quest.achievements)
    achievements_remaining = len(remaining)
    achievements_completed = len(completed)
    print "{:.2%} complete.  {} total achievements.  {} remain open.\n".format(
        (achievements_completed)/total_achievements,
        total_achievements,
        achievements_remaining
    )

    session.close()


def create_quest(args):
    logging.debug("create_quest()")
    logging.debug(
        "category: %s    state: %s    note: %s",
        args.category, args.state, args.note
    )

    session = make_session()

    print "Creating quest... (could take some time)"

    hosts = []

    if args.hosts:
        for hostname in args.hosts.split(","):
            if not hostname:
                continue
            logging.debug("Specified host: %s", hostname)
            host = Host.get_host(session, hostname)
            if host is None:
                Host.create(session, hostname)
            hosts.append(hostname)
    else:
        for hostname in sys.stdin.read().split("\n"):
            if not hostname:
                continue
            logging.debug("Entered host: %s", hostname)
            host = Host.get_host(session, hostname)
            if host is None:
                Host.create(session, hostname)
            hosts.append(hostname)

    if len(hosts) == 0:
        logging.error("No hosts specified")
        return

    event_type = EventType.get_event_type(session, args.category, args.state)
    if event_type is None:
        logging.error(
            "No matching event state found for %s %s", args.category, args.state
        )
        session.close()
        return

    user = getpass.getuser()

    quest = Quest.create(session, user, hosts, event_type, description=args.note)

    print "Quest {} created with {} achievements".format(
        quest.id, len(quest.achievements)
    )

    session.commit()
    session.close()


def parse_cli_args():
    description_msg = "Hermes CLI"
    parser = argparse.ArgumentParser(description=description_msg)

    parser.add_argument("-c", "--config", default="/etc/hermes.yaml",
                        help="Path to config file.")
    parser.add_argument("-v", "--verbose", action="count", default=0, help="Increase logging verbosity.")
    parser.add_argument("-q", "--quiet", action="count", default=0, help="Decrease logging verbosity.")
    parser.add_argument("-V", "--version", action="version",
                        version="%%(prog)s %s" % hermes.__version__,
                        help="Display version information.")

    subparsers = parser.add_subparsers()

    # Add the command line parsers for info commands
    info_parser = subparsers.add_parser("info", help="Display information about defined types.")
    info_subparsers = info_parser.add_subparsers()
    info_event_types_parser = info_subparsers.add_parser("event-types")
    info_event_types_parser.set_defaults(func=info_event_types)
    info_fates_parser = info_subparsers.add_parser("fates")
    info_fates_parser.set_defaults(func=info_fates)

    # Add host command line parser
    host_parser = subparsers.add_parser("host", help="Host level operations")
    host_subparser = host_parser.add_subparsers()
    # Host list parser
    host_list_parsers = host_subparser.add_parser("list")
    host_list_parsers.set_defaults(func=list_hosts)
    # Host add parser
    host_add_parser = host_subparser.add_parser("add")
    host_add_parser.add_argument("hostname")
    host_add_parser.set_defaults(func=add_host)
    # Host events parsers
    host_events_parser = host_subparser.add_parser("events")
    host_events_parser.add_argument("hostname")
    host_events_parser.add_argument(
        "-l", "--limit", default=20, type=int,
        help="Limit the number of events displayed"
    )
    host_events_parser.set_defaults(func=list_host_events)
    # Host achievements parser
    host_achievements_parser = host_subparser.add_parser("achievements")
    host_achievements_parser.add_argument("hostname")
    host_achievements_parser.add_argument(
        "-l", "--limit", default=20, type=int,
        help="Limit the number of achievements displayed"
    )
    host_achievements_parser.set_defaults(func=list_host_achievements)

    # events command line parser
    event_parser = subparsers.add_parser(
        "event", help="Create and list Events"
    )
    event_subparser = event_parser.add_subparsers()
    event_create_parser = event_subparser.add_parser("create")
    event_create_parser.add_argument("hostname")
    event_create_parser.add_argument("category")
    event_create_parser.add_argument("state")
    event_create_parser.add_argument(
        "-n", "--note", type=str, help="Note to attach to the Event"
    )
    event_create_parser.set_defaults(func=create_event)

    # quest command line parser
    quest_parser = subparsers.add_parser(
        "quest", help="Create and list Quests"
    )
    quest_subparser = quest_parser.add_subparsers()
    # quest list parser
    quest_list_parser = quest_subparser.add_parser("list")
    quest_list_parser.set_defaults(func=list_quests)
    # quest show parser
    quest_show_parser = quest_subparser.add_parser("show")
    quest_show_parser.add_argument("quest_id")
    quest_show_parser.add_argument(
        "-a", "--all", action="store_true",
        help="Show all associated achievements"
    )
    quest_show_parser.set_defaults(func=show_quest)
    # quest creation parser
    quest_create_parser = quest_subparser.add_parser("create")
    quest_create_parser.add_argument("category")
    quest_create_parser.add_argument("state")
    quest_create_parser.add_argument(
        "-n", "--note", type=str, required=True,
        help="Note to attach to the Quest"
    )
    quest_create_parser.add_argument(
        "-s", "--hosts", type=str,
        help="Comma separated Hosts involved in this Quest"
    )
    quest_create_parser.set_defaults(func=create_quest)

    return parser.parse_args()


def main():
    args = parse_cli_args()
    settings.update_from_config(args.config)

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG, format=settings.log_format)
    elif args.quiet:
        logging.basicConfig(level=logging.ERROR, format=settings.log_format)
    else:
        logging.basicConfig(level=logging.INFO, format=settings.log_format)

    args.func(args)



if __name__ == "__main__":
    main()
