#!/usr/bin/env python

import argparse
import logging
import os
import sys
from threading import Thread
from time import sleep
import tornado.ioloop
import tornado.httpserver
import tornado.web

import hermes
from hermes import version
from hermes.app import Application
from hermes.settings import settings


from sqlalchemy.exc import OperationalError

try:
    from raven.contrib.tornado import AsyncSentryClient
    raven_installed = True
except ImportError:
    raven_installed = False

sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


def parse_args():
    parser = argparse.ArgumentParser(description="Hermes Web Service")
    parser.add_argument("-c", "--config", default="/etc/hermes/server.yaml",
                        help="Path to config file.")
    parser.add_argument(
        "-v", "--verbose", action="count", default=0,
        help="Increase logging verbosity."
    )
    parser.add_argument(
        "-q", "--quiet", action="count", default=0,
        help="Decrease logging verbosity."
    )
    parser.add_argument(
        "-V", "--version", action="version",
        version="%%(prog)s %s" % hermes.__version__,
        help="Display version information."
    )
    parser.add_argument(
        "-p", "--port", type=int, default=None, help="Override port in config."
    )
    return parser.parse_args()


def main():

    args = parse_args()
    settings.update_from_config(args.config)

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG, format=settings.log_format)
    elif args.quiet:
        logging.basicConfig(level=logging.ERROR, format=settings.log_format)
    else:
        logging.basicConfig(level=logging.INFO, format=settings.log_format)

    tornado_settings = {
        "static_path": os.path.join(os.path.dirname(hermes.__file__), "static"),
        "debug": settings.debug,
        "xsrf_cookies": False,
        "cookie_secret": settings.secret_key,
    }

    my_settings = {
        "db_uri": settings.database,
        "db_engine": None,
        "db_session": None,
        "domain": settings.domain
    }

    application = Application(my_settings=my_settings, **tornado_settings)

    # If Sentry DSN is set, try to import raven
    if settings.sentry_dsn:
        if not raven_installed:
            logging.warning(
                'Sentry DSN set but raven not installed. Not enabling Sentry.'
            )
        else:
            logging.info(
                'Sentry DSN set and raven installed. Enabling Sentry.'
            )
            application.sentry_client = AsyncSentryClient(settings.sentry_dsn)
    else:
        logging.info('Sentry DSN not set. Not enabling Sentry.')

    port = args.port or settings.port

    logging.info(
        "Starting application server with %d processes on port %d",
        settings.num_processes, port
    )

    server = tornado.httpserver.HTTPServer(application)
    server.bind(port, address=settings.bind_address)
    server.start(settings.num_processes)
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        tornado.ioloop.IOLoop.instance().stop()
    finally:
        print "Bye"


if __name__ == "__main__":
    main()
