#!/usr/bin/env python

import argparse
import logging
import textwrap

import hermes
from hermes.handlers.util import PluginHelper
from hermes.models import get_db_session, get_db_engine, Session, Quest, Labor
from hermes.settings import settings
from hermes.util import email_message

from sqlalchemy.exc import OperationalError

sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


def parse_args():
    parser = argparse.ArgumentParser(description="Hermes Web Service")
    parser.add_argument("-c", "--config", default="/etc/hermes/server.yaml",
                        help="Path to config file.")
    parser.add_argument(
        "-v", "--verbose", action="count", default=0,
        help="Increase logging verbosity."
    )
    parser.add_argument(
        "-q", "--quiet", action="count", default=0,
        help="Decrease logging verbosity."
    )
    parser.add_argument(
        "-V", "--version", action="version",
        version="%%(prog)s %s" % hermes.__version__,
        help="Display version information."
    )
    parser.add_argument(
        "-s", "--send-to", type=str, default=None, help="Send all reports to this email address"
    )
    return parser.parse_args()


def find_quest(quests, quest_id):
    for quest in quests:
        if quest.id == quest_id:
            return quest


    return None

def main():
    args = parse_args()
    settings.update_from_config(args.config)

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG, format=settings.log_format)
    elif args.quiet:
        logging.basicConfig(level=logging.ERROR, format=settings.log_format)
    else:
        logging.basicConfig(level=logging.INFO, format=settings.log_format)

    logging.info(
        "Starting Hermes notification system"
    )

    # Connect to the database and get the open quests
    db_engine = get_db_engine(settings.database)
    Session.configure(bind=db_engine)
    session = Session()
    open_quests = Quest.get_open_quests(session)
    open_labors = Labor.get_open_labors(session)

    # get the list of all the hostnames that have open labors
    hostnames = set()
    for labor in open_labors:
        hostnames.add(labor.host.hostname)

    # get the owner information
    try:
        results = PluginHelper.request_post(
            json_body={
                "operation": "owners",
                "hostnames": list(hostnames)
            }
        )
        owners = results.json()['results']
    except Exception as e:
        logging.error("Failed to get host owners: " + e.message)

    # get the tags for hosts
    try:
        results = PluginHelper.request_post(
            json_body={
                "operation": "tags",
                "hostnames": list(hostnames)
            }
        )
        tags = results.json()['results']
    except Exception as e:
        logging.error("Failed to get host tags: " + e.message)

    # map the labors and quests to owners
    info = {}
    for labor in open_labors:
        if not labor.for_owner:
            continue
        if owners[labor.host.hostname] not in info:
            info[owners[labor.host.hostname]] = {}

        owner = info[owners[labor.host.hostname]]

        quest_id = labor.quest_id if labor.quest else 0
        if quest_id not in owner:
            owner[quest_id] = []

        owner[quest_id].append(labor.host.hostname)

    # generate and send emails
    for owner in info:
        plain_msg = generate_plain_mesg(info, open_quests, owner, tags)
        html_msg = generate_html_mesg(info, open_quests, owner, tags)

        recipient = args.send_to if args.send_to else "{}@{}".format(
            owner, settings.domain
        )

        email_message(
            recipient,
            "Open Hermes labors need your attention", plain_msg,
            html_message=html_msg
        )


def generate_plain_mesg(info, open_quests, owner, tags):
    """Generate the plain text version of the 'open labors' email

    Args:
        info: the gathered and sorted open labor information
        open_quests: the information on open quests
        owner: the owner we care about emailing
        tags: the host tags information

    Returns:
        a plain text message to be sent to the owner specified
    """

    msg = (
        "This email is being sent to {} because that is the owner listed\n"
        "for the systems with open Hermes labors listed below.\n\n"
        "Due dates, if any, are noted with each quest.\n".format(owner)
    )
    msg += (
        "\nTo throw an event manually, you can run the following command "
        "on a shell server:"
        "\n\n"
        "$ hermes event create [event] --host [hostname].\n\n"
        "Or you can visit the quests linked below.\n\n".format(
            settings.frontend)
    )
    for quest_id in info[owner]:
        quest = find_quest(open_quests, quest_id)
        if quest:
            msg += (
                "==[ QUEST {} ]================================\n"
                "CREATOR: {}\n"
            ).format(
                quest_id, quest.creator
            )
            if quest.target_time:
                msg += "DUE: {}\n".format(quest.target_time)
            msg += "DESC: \"{}\"\n".format(textwrap.fill(
                quest.description,
                width=60, subsequent_indent=""
            ))
            msg += "LINK: {}/v1/quests/{}\n\n".format(
                settings.frontend, quest_id
            )
        else:
            msg += "  Labors not associated with a quest:\n\n"

        msg += "Machines with labors:\n"

        for hostname in sorted(info[owner][quest_id]):
            if tags[hostname]:
                tags_str = "{}".format((", ".join(tags[hostname])))
            else:
                tags_str = "no services"
            msg += "    {} ({})\n".format(hostname, tags_str)

        msg += "\n\n"

    return msg


def generate_html_mesg(info, open_quests, owner, tags):
    """Generate the HTML version of the 'open labors' email

    Args:
        info: the gathered and sorted open labor information
        open_quests: the information on open quests
        owner: the owner we care about emailing
        tags: the host tags information

    Returns:
        an HTML doc of the message to be sent to the owner specified
    """

    msg = '<html>' \
          '<body style="font-family: Verdana; font-size: 1em; color: #000">'
    msg += (
        "<div style='padding: 10px; border-radius: 5px; background: #232f3e; "
        "color: #fff; font-weight: bold; font-size: 1.25em;'>"
        "Hermes Notifications"
        "</div>"
        "<div style='padding: 10px;'><p>This email is being sent to {} because that is the owner listed\n"
        "for the systems with open Hermes labors listed below.</p>"
        "<p>Due dates, if any, are noted with each quest.</p>"
        "".format(owner)
    )
    msg += (
        "<p>To throw an event manually, you can run the following command "
        "on a shell server:</p>"
        "<pre style='font-size: 1.2em'>$ hermes event create [event] --host "
        "[hostname]</pre>"
        "<p>Or you can visit the quests linked below.</p></div>".format(
            settings.frontend)
    )
    for quest_id in info[owner]:
        quest = find_quest(open_quests, quest_id)
        if quest:
            msg += (
                "<div style='border-radius: 5px; background: #dce1e6; "
                "padding: 10px; margin-bottom: 10px;'>"
                "<span style='font-size: 1.1em; font-weight: bold'>QUEST {}</span><br/>"
                "<strong>CREATOR:</strong> {}<br />"
            ).format(
                quest_id, quest.creator
            )
            if quest.target_time:
                msg += "<strong>DUE:</strong> {}<br/>".format(quest.target_time)
            msg += "<strong>DESC:</strong><p> \"{}\"</p>".format(quest.description)
            msg += "<strong>LINK:</strong> <code>{}/v1/quests/{}</code><br/>".format(
                settings.frontend, quest_id
            )
        else:
            msg += (
                "<div style='border-radius: 5px; background: #dce1e6; "
                "padding: 10px; margin-bottom: 10px;'>"
                "<span style='font-size: 1.1em; font-weight: bold'>Labors not "
                "associated with a quest:</span><br />"
            )

        msg += "<p>Machines with labors:</p>"

        msg += "<pre style='margin-left: 10px; font-size: 1.2em'>"
        for hostname in sorted(info[owner][quest_id]):
            if tags[hostname]:
                tags_str = "{}".format((", ".join(tags[hostname])))
            else:
                tags_str = "no services"
            msg += "{} ({})\n".format(hostname, tags_str)

        msg += "</pre></div>"

    msg += "</body>"

    return msg


if __name__ == "__main__":
    main()
