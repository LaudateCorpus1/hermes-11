(function() {
    'use strict';

    function QuestCreationCtrl(hermesService, $q, $routeParams, $location) {
        var vm = this;

        vm.user = null;
        vm.hostList = [];
        vm.selectedEventType = null;
        vm.description = null;
        vm.today = new Date();
        vm.targetDate = new Date();
        vm.targetDate.setDate(new Date().getDate() + 14);
        vm.targetDate.setTime(Math.round(vm.targetDate.getTime() / 900000) * 900000);

        vm.errorMessages = null;
        vm.queryErrorMessage = null;
        vm.successMessage = null;
        vm.createInProgress = false;
        vm.queryInProgress = false;
        vm.result = null;
        vm.showFatesModal = false;
        vm.queryString = null;
        vm.hostNameEntry = null;

        vm.queriedHosts = [];
        vm.startingEventTypes = null;

        vm.selectOptions = {
            updateOn: 'default change blur',
            getterSetter: true,
            allowInvalid: true
        };

        hermesService.getStartingEventTypes().then(function(eventTypes) {
            vm.startingEventTypes = eventTypes;
            vm.selectedEventType = eventTypes[0];
        });

        hermesService.getCurrentUser().then(function(user){
            if (user) {
                vm.user = user;
            } else {
                vm.errorMessages.push("Cannot create a new quest if not authenticated.");
            }
        });

        vm.runQuery = runQuery;
        vm.removeQueriedHost = removeQueriedHost;
        vm.removeHost = removeHost;
        vm.addHost = addHost;
        vm.moveQueriedToQueued = moveQueriedToQueued;
        vm.eventTypesSelection = eventTypesSelection;
        vm.createQuest = createQuest;
        vm.calDateClasser = calDateClasser;


        ////////////////////////////////

        /**
         * Create a quest with the information we have
         */
        function createQuest() {
            if (vm.createInProgress) return;

            vm.createInProgress = true;

            vm.errorMessages = [];

            if (vm.hostList.length == 0) {
                vm.errorMessages.push("Cannot create a quest with an empty list of hosts.");
            }

            if (!vm.selectedEventType) {
                vm.errorMessages.push("Cannot create a quest without a event type");
            }

            if (!vm.description) {
                vm.errorMessages.push("Cannot create a quest without a description.");
            }

            if (!vm.user) {
                vm.errorMessages.push("Cannot create a new quest if not authenticated.");
            }

            if (vm.errorMessages.length != 0) {
                vm.createInProgress = false;
                return;
            }

            vm.result = hermesService.createQuest(vm.user, vm.hostList,
                vm.selectedEventType, vm.targetDate, vm.description)
                .then(function(response) {
                    vm.createInProgress = false;
                    vm.hostList = [];
                    vm.description = null;
                    vm.successMessage = "Successfully create quest " + response.data.id;
                })
                .catch(function(error) {
                    vm.createInProgress = false;
                    vm.errorMessages.push("Quest creation failed!  " + error.statusText);
                });

        }

        /**
         * The getter/setter for event types
         */
        function eventTypesSelection(selection) {
            if (angular.isDefined(selection)) {
                vm.selectedEventType = selection;
            } else {
                return vm.selectedEventType;
            }

        }

        /**
         * Run the user specified query against the query passthrough service
         */
        function runQuery() {
            if (!vm.queryString || vm.queryString.trim().length == 0) {
                vm.queryErrorMessage = "Query is empty.";
                return;
            }
            vm.queryErrorMessage = null;
            vm.queryInProgress = true;
            hermesService.runQuery(vm.queryString).then(function(hosts) {
                vm.queryInProgress = false;
                if (hosts) {
                    vm.queriedHosts = hosts;
                }
            }).catch(function(error) {
                vm.queryInProgress = false;
                vm.queryErrorMessage = "Failed to run query!  " + error.statusText;
            });
        }

        /**
         * Remove a host from the list of hosts generated by the query
         * @param host the host to remove
         */
        function removeQueriedHost(host) {
            var idx = vm.queriedHosts.indexOf(host);
            if (idx > -1) {
                vm.queriedHosts.splice(idx, 1);
            }
        }

        /**
         * Remove a host from the list of hosts queued up for this quest
         * @param host the host to remove
         */
        function removeHost(host) {
            var idx = vm.hostList.indexOf(host);
            if (idx > -1) {
                vm.hostList.splice(idx, 1);
            }
        }

        /**
         * Add a specified host to the hosts queued up, but only if it isn't
         * in there already
         * @param host the host to add
         */
        function addHost(host) {
            if (!host) return;
            if (vm.hostList.indexOf(host) == -1) {
                vm.hostList.push(host);
            }
        }

        /**
         * Add queried hosts to queued hosts
         */
        function moveQueriedToQueued() {
            while (vm.queriedHosts.length > 0) {
                addHost(vm.queriedHosts.shift());
            }
        }

        /**
         * Adds our classes to the date picker
         * @param date the date in question
         * @param mode the mode
         */
        function calDateClasser(date, mode) {
            return "date-picker";
        }

    }

    angular.module('hermesApp').controller('QuestCreationCtrl', QuestCreationCtrl);
    QuestCreationCtrl.$inject = ['HermesService', '$q', '$routeParams', '$location'];
})();
